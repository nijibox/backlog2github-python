#!/usr/bin/env python
# -*- coding:utf8 -*-
from __future__ import unicode_literals
import os
import ConfigParser
import argparse
import time
import yaml
from unicodedata import normalize
from backlog import Project, Api as BacklogApi
from progress import ProgressText


CONFIG_DEFAULT_PATH = os.path.join(
    os.path.dirname(__file__),
    'app.ini',
)


def normalize_str(form, str, encoding='utf8'):
    s = normalize(form, str.decode(encoding))
    return s.encode(encoding)


def fetch_issues(args, config, backlog):
    if '--' in args.key:
        project = Project.from_api(args.key[:-2], backlog)
        max_issue = project.get_issues(params={'sort': 'created', 'order': 'desc', 'count': 1})[0]
        maxIssueKey = int(max_issue['issueKey'].split('-')[1])
        progress = ProgressText(max_value=maxIssueKey)
        progress.display(0)
        for key in range(1, maxIssueKey+1):
            issueKey = '{}-{}'.format(project['projectKey'], key)
            issue_dir = os.path.join(args.output, issueKey)
            if os.path.exists(issue_dir):
                continue
            issue = backlog.get_issue(issueKey)
            if 'issueKey' in issue:
                continue
            issue.init_workspace(args.output)
            issue.dump_all()
            progress.display(key)
            time.sleep(1)
        progress.end()
    elif '-' in args.key:
        # key is issue
        issue = backlog.get_issue(args.key)
        if 'issueKey' not in issue:
            exit(0)
        issue.init_workspace(args.output)
        issue.dump_all()
    else:
        # key is project
        project = Project.from_api(args.key, backlog)
        issues = project.get_issues()
        for issue in issues:
            print(u'{}: {}'.format(issue['issueKey'], issue['summary']))
            # print('\n')


def fetch_wiki(args, config, backlog):
    project = Project.from_api(args.key, backlog)
    wikis = project.get_wikis()
    save_dir = os.path.join(args.output, 'wikis')
    if not os.path.exists(save_dir):
        os.makedirs(save_dir)
    for wiki in wikis:
        wiki.dump(save_dir)


def sync_wiki(args, config, backlog):
    import fnmatch
    project = Project.from_api(args.key, backlog)
    saved_dir = os.path.join(args.output, 'wikis')
    current_wikis = project.get_wikis()

    matches = {}
    for root, dirnames, filenames in os.walk(saved_dir):
        for filename in fnmatch.filter(filenames, '*.yml'):
            filepath = os.path.join(root, filename)
            filekey = filepath.replace(saved_dir + '/', '')
            filekey = normalize_str('NFC', filekey.encode('utf8'))
            matches[filekey[:-4]] = filepath

    import codecs
    for wiki in current_wikis:
        wiki_name = wiki['name'].encode('utf8')
        if wiki_name not in matches:
            continue
        with codecs.open(matches[wiki_name], encoding='utf8') as fp:
            origin = yaml.load(fp)
        if wiki['content'] == origin['content']:
            continue
        wiki['content'] = origin['content']
        print(wiki_name)
        print('\tYou update')
        wiki.save()
    return


parser = argparse.ArgumentParser()
parser.add_argument('-c', '--conf', type=str, default=CONFIG_DEFAULT_PATH)
parser.add_argument('-o', '--output', type=str, default='.')
subparsers = parser.add_subparsers()

parser_issue = subparsers.add_parser('issue')
parser_issue.set_defaults(func=fetch_issues)
parser_issue.add_argument('key', type=str)
parser_issue.add_argument('--filter', type=str, required=False)

parser_wiki = subparsers.add_parser('wiki')
parser_wiki.set_defaults(func=fetch_wiki)
parser_wiki.add_argument('key', type=str)

parser_wiki = subparsers.add_parser('syncwiki')
parser_wiki.set_defaults(func=sync_wiki)
parser_wiki.add_argument('key', type=str)


args = parser.parse_args()

config = ConfigParser.ConfigParser()
config.read(args.conf)

backlog = BacklogApi(config.get('Backlog', 'space_id'), config.get('Backlog', 'api_key'))

args.func(args, config, backlog)
